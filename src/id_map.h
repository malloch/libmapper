
#ifndef __MPR_ID_MAP_H__
#define __MPR_ID_MAP_H__

#include <stdint.h>
#include "util/mpr_inline.h"

/*! Bit flags for indicating instance `id_map` status. */
#define UPDATED           0x01
#define RELEASED_LOCALLY  0x02
#define RELEASED_REMOTELY 0x04

typedef struct _mpr_id_mapper *mpr_id_mapper;
typedef uint64_t mpr_id;

mpr_id_mapper mpr_id_mapper_new();

void mpr_id_mapper_free(mpr_id_mapper im);

// TODO: also move this struct into id_map.c
/*! The instance ID map is a linked list of int32 instance ids for coordinating
 *  remote and local instances. */
typedef struct _mpr_id_map {
    struct _mpr_id_map *next;       /*!< The next id map in the list. */

    uint64_t GID;                   /*!< Global instance id (generated by originating device). */
    uint64_t LID;                   /*!< Local instance id. */
    int16_t LID_refcount;
    int16_t GID_refcount;
    uint8_t indirect;
} mpr_id_map_t, *mpr_id_map;

MPR_INLINE static void mpr_id_map_incr_local_refcount(mpr_id_map id_map)
{
    ++id_map->LID_refcount;
}

MPR_INLINE static void mpr_id_map_incr_global_refcount(mpr_id_map id_map)
{
    ++id_map->GID_refcount;
}

MPR_INLINE static int mpr_id_map_get_local_refcount(mpr_id_map id_map)
{
    return id_map->GID_refcount;
}

MPR_INLINE static int mpr_id_map_get_global_refcount(mpr_id_map id_map)
{
    return id_map->GID_refcount;
}

void mpr_id_mapper_reserve_id_map(mpr_id_mapper im);

int mpr_id_mapper_LID_decref(mpr_id_mapper im, mpr_id_map id_map);

int mpr_id_mapper_GID_decref(mpr_id_mapper im, mpr_id_map id_map);

mpr_id_map mpr_id_mapper_add_id_map(mpr_id_mapper im, mpr_id LID, mpr_id GID, int indirect);

mpr_id_map mpr_id_mapper_get_id_map_by_LID(mpr_id_mapper im, mpr_id LID);

mpr_id_map mpr_id_mapper_get_id_map_by_GID(mpr_id_mapper im, mpr_id GID);

/* TODO: rename this function */
mpr_id_map mpr_id_mapper_get_id_map_GID_free(mpr_id_mapper im, mpr_id last_GID);

int mpr_id_mapper_get_num_id_maps(mpr_id_mapper im, int active);

void mpr_id_mapper_remove_id_map(mpr_id_mapper im, mpr_id_map rem);

#ifdef DEBUG
void mpr_id_mapper_print(mpr_id_mapper im);
#endif

#endif /* __MPR_ID_MAP_H__ */
